from typing import Optional

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        # finding the length
        if head is None:
            return head
        curr = head
        count = 1
        while curr.next is not None:
            count += 1
            curr = curr.next
        curr.next = head  # make it circular
        
        d = count - (k % count)
        if d != 0:
            curr = head
            while d > 1:
                d -= 1
                curr = curr.next
            head = curr.next
            curr.next = None
        return head

# Helper: Create linked list from Python list
def create_linked_list(arr):
    if not arr:
        return None
    head = ListNode(arr[0])
    current = head
    for val in arr[1:]:
        current.next = ListNode(val)
        current = current.next
    return head

# Helper: Print linked list as Python list
def print_linked_list(head):
    res = []
    while head:
        res.append(head.val)
        head = head.next
    print(res)

# Driver code
if __name__ == "__main__":
    l = [1, 2, 3, 4, 5]
    k = 2
    head = create_linked_list(l)

    print("Original List:")
    print_linked_list(head)

    solution = Solution()
    rotated = solution.rotateRight(head, k)

    print(f"List after rotating by {k}:")
    print_linked_list(rotated)
