from typing import Optional

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        if l1 is None:
            return l2
        if l2 is None:
            return l1
        head = ListNode(-111)
        curr = head
        while l1:
            if l1.val <= l2.val:
                curr.next = l1
                curr = l1
                if l1.next:
                    l1 = l1.next
                else:
                    curr.next = l2
                    break
            elif l1.val > l2.val:
                curr.next = l2
                curr = l2
                if l2.next:
                    l2 = l2.next
                else:
                    curr.next = l1
                    break
        return head.next

# Helper function to create linked list from list
def create_linked_list(arr):
    if not arr:
        return None
    head = ListNode(arr[0])
    current = head
    for val in arr[1:]:
        current.next = ListNode(val)
        current = current.next
    return head

# Helper function to print linked list
def print_linked_list(head):
    res = []
    while head:
        res.append(head.val)
        head = head.next
    print(res)

# Driver code
if __name__ == "__main__":
    l1_list = [1, 3, 5]
    l2_list = [2, 4, 6]
    
    l1 = create_linked_list(l1_list)
    l2 = create_linked_list(l2_list)
    
    solution = Solution()
    merged_head = solution.mergeTwoLists(l1, l2)
    
    print("Merged Linked List:")
    print_linked_list(merged_head)

