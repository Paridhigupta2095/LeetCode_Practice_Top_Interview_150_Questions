from typing import Optional

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

# Your code (unchanged)
class Solution:
    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:
        if root is None:
            return False

        targetSum -= root.val
        print(targetSum)
        if root.left is None and root.right is None:
            if targetSum == 0:
                return True
            else:
                #targetSum += root.val  (code will work without this also)
                return False
        else:
            l = self.hasPathSum(root.left, targetSum)
            if l:
                return True
            else:
                r = self.hasPathSum(root.right, targetSum)
                if r:
                    return True
                else:
                    return False


# -------- DRIVER CODE --------
if __name__ == "__main__":
    # Build this tree:
    #         5
    #        / \
    #       4   8
    #      /   / \
    #     11  13  4
    #    /  \      \
    #   7    2      1

    root = TreeNode(5)
    root.left = TreeNode(4)
    root.right = TreeNode(8)
    root.left.left = TreeNode(11)
    root.left.left.left = TreeNode(7)
    root.left.left.right = TreeNode(2)
    root.right.left = TreeNode(13)
    root.right.right = TreeNode(4)
    root.right.right.right = TreeNode(1)

    sol = Solution()
    target = 22

    print("Target:", target)
    print("Path Sum Exists?:", sol.hasPathSum(root, target))
    # Expected: True (path 5 → 4 → 11 → 2)

