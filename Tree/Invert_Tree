# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

# Your Solution class stays unchanged
class Solution:
    def invertTree(self, root: TreeNode) -> TreeNode:
        if root is None:
            return None
        root.left, root.right = root.right, root.left
        self.invertTree(root.left)
        self.invertTree(root.right)
        return root


# -------- Helper function to print tree --------
def print_tree(root):
    if not root:
        return []
    from collections import deque
    q = deque([root])
    result = []
    while q:
        node = q.popleft()
        if node:
            result.append(node.val)
            q.append(node.left)
            q.append(node.right)
        else:
            result.append(None)
    while result and result[-1] is None:
        result.pop()
    return result


# -------- DRIVER CODE --------
if __name__ == "__main__":
    # Build example tree: [4,2,7,1,3,6,9]
    root = TreeNode(4)
    root.left = TreeNode(2, TreeNode(1), TreeNode(3))
    root.right = TreeNode(7, TreeNode(6), TreeNode(9))

    print("Original Tree:", print_tree(root))

    sol = Solution()
    inverted = sol.invertTree(root)

    print("Inverted Tree:", print_tree(inverted))

