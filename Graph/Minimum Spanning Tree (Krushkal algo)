from typing import List

class UnionFind:
    def __init__(self, size: int):
        self.root = [i for i in range(size)]
        self.rank = [1] * size

    def find(self, x: int) -> int:
        while x != self.root[x]:
            # Path compression
            self.root[x] = self.root[self.root[x]]
            x = self.root[x]
        return x

    def union(self, x: int, y: int) -> bool:
        rootx = self.find(x)
        rooty = self.find(y)

        if rootx == rooty:
            return False

        if self.rank[rootx] > self.rank[rooty]:
            self.root[rooty] = rootx
        elif self.rank[rootx] < self.rank[rooty]:
            self.root[rootx] = rooty
        else:
            self.root[rooty] = rootx
            self.rank[rootx] += 1

        return True


class Solution:
    def minCostConnectPoints(self, points: List[List[int]]) -> int:
        n = len(points)
        edges_weight = []

        # Build all weighted edges (Manhattan distance)
        for i in range(n):
            for j in range(i + 1, n):
                w = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])
                edges_weight.append([w, i, j])

        # Sort edges by weight
        edges_weight.sort()

        tot_weight = 0
        edge_count = 0
        uf = UnionFind(n)

        # Kruskalâ€™s MST
        for w, x, y in edges_weight:
            if uf.union(x, y):
                tot_weight += w
                edge_count += 1
                if edge_count == n - 1:
                    break

        return tot_weight


# ---------------- DRIVER CODE ----------------
if __name__ == "__main__":
    points = [[0,0],[2,2],[3,10],[5,2],[7,0]]
    sol = Solution()
    result = sol.minCostConnectPoints(points)
    print("Minimum Cost to Connect Points:", result)

